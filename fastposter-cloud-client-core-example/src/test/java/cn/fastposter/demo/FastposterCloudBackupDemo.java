package cn.fastposter.demo;import cn.fastposter.cloud.client.FastposterCloudClient;import okhttp3.OkHttpClient;import okhttp3.tls.HandshakeCertificates;public class FastposterCloudBackupDemo {    public static void main(String[] args) {        // 创建海报客户端对象        FastposterCloudClient client = FastposterCloudClient.builder()                .okHttpClient(newOkHttpClient())                .endpoint("https://api.fastposter.net")                .appKey("1f5aa8d75f2d4bc4")                .appSecret("8a395182a41e41ad9318cea4e1018cdc")                .debug(true)                .build();//        // 构造海报参数//        Map<String, String> params = new HashMap<>();//        params.put("name", "测试文本");//        Poster p = client.buildPoster("ced9b1d5337d494c", params);//        p.save("aaa.png");        // 方法二        client.buildPoster("ced9b1d5337d494c")//                .scale(.1)                .png()                .add("name", "测试文本")                .build()                .save();//        client.buildPoster("ced9b1d5337d494c").png().add("name", "测试文本").build().save("aaa.png");//        // 生成海报并保存//        client.buildPoster("ced9b1d5337d494c")//                .userAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36")//                .params(params).build().save();        // 只获取生成海报的参数，方便前端直接调用接口生成海报，这样流量可以不经过用户的应用服务器。//        GetPosterArgs posterArgs = client.buildPoster("ced9b1d5337d494c").params(params).getArgs();//        System.out.println(posterArgs.toJson());    }    private static OkHttpClient newOkHttpClient() {        HandshakeCertificates certificates = new HandshakeCertificates.Builder()                .addPlatformTrustedCertificates()                .build();        OkHttpClient client = new OkHttpClient.Builder()                .sslSocketFactory(certificates.sslSocketFactory(), certificates.trustManager())                .build();        return client;    }}
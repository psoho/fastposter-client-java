package net.fastposter.client;import com.fasterxml.jackson.databind.ObjectMapper;import lombok.Builder;import lombok.Data;import lombok.SneakyThrows;import lombok.extern.slf4j.Slf4j;import okhttp3.*;import org.springframework.util.Base64Utils;import org.springframework.util.DigestUtils;import java.util.Map;import java.util.concurrent.TimeUnit;@Slf4j@Data@Builderpublic class FastposterClient {    final static OkHttpClient okHttpClient = new OkHttpClient.Builder().connectTimeout(6, TimeUnit.SECONDS).build();    private static final String USER_AGENT = "fastposter-client/java:v1.0.0";    String endpoint;    String appKey;    String appSecret;    @SneakyThrows    public Poster getPoster(Integer id, Map<String, String> params) {        String data = new ObjectMapper().writeValueAsString(params);        // base64编码        String playload = Base64Utils.encodeToString(data.getBytes());        // 计算签名        String sign = DigestUtils.md5DigestAsHex((playload + appSecret).getBytes());        GetPosterArgs args = GetPosterArgs.builder()                .id(id)                .appKey(appKey)                .sign(sign)                .payload(playload)                .build();        System.out.println(args);        String url = this.endpoint + "/v1/fast/poster";        MediaType mediaType = MediaType.parse("application/json");        String json = new ObjectMapper().writeValueAsString(args);        RequestBody body = RequestBody.create(mediaType, json);        Request request = new Request.Builder()                .url(url)                .post(body)                .addHeader("User-Agent", USER_AGENT)                .addHeader("Content-Type", "application/json")                .addHeader("cache-control", "no-cache")                .build();        Response response = okHttpClient.newCall(request).execute();        System.out.println("响应");//        System.out.println(response.body().string());        System.out.println(response.body().contentLength());        System.out.println(response);        return new Poster(id + "", response.body().byteStream());    }}